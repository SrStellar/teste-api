import { AppointmentModel } from '../../models/Appointment';
import { ServiceModel } from '../../models/Service';
export async function listUserAppointments(userId: string) { return AppointmentModel.find({ userId }).populate('barberId', 'name').sort({ date: 1 }); }
export async function createAppointment(data: { userId: string; clientName: string; barberId: string; date: string; time: string; serviceIds: string[]; notes?: string; }) { const services = await ServiceModel.find({ _id: { $in: data.serviceIds } }).populate('categoryId', 'name'); if (services.length !== data.serviceIds.length) { throw { status: 400, message: 'Serviço inválido.' }; } const total = services.reduce((sum, s) => sum + Number(s.price), 0); const conflict = await AppointmentModel.findOne({ barberId: data.barberId, date: new Date(data.date), time: data.time, status: { $ne: 'CANCELLED' } }); if (conflict) throw { status: 409, message: 'Horário indisponível.' }; const appointmentServices = services.map(s => ({ serviceId: s.id, name: s.name, price: s.price })); return AppointmentModel.create({ userId: data.userId, clientName: data.clientName, barberId: data.barberId, date: new Date(data.date), time: data.time, totalPrice: total, notes: data.notes, services: appointmentServices }); }
export async function cancelAppointment(id: string, userId: string) { const appt = await AppointmentModel.findById(id); if (!appt || appt.userId.toString() !== userId) throw { status: 404, message: 'Agendamento não encontrado.' }; if (appt.status === 'CANCELLED') return appt; return AppointmentModel.findByIdAndUpdate(id, { status: 'CANCELLED' }, { new: true }); }