import { prisma } from '../../db/prisma';
export async function listUserAppointments(userId: number) { return prisma.appointment.findMany({ where: { userId }, include: { services: { include: { service: true } }, barber: true }, orderBy: { date: 'asc' } }); }
export async function createAppointment(data: { userId: number; clientName: string; barberId: number; date: string; time: string; serviceIds: number[]; notes?: string; }) { const services = await prisma.service.findMany({ where: { id: { in: data.serviceIds } } }); if (services.length !== data.serviceIds.length) { throw { status: 400, message: 'Serviço inválido.' }; } const total = services.reduce((sum, s) => sum + Number(s.price), 0); const conflict = await prisma.appointment.findFirst({ where: { barberId: data.barberId, date: new Date(data.date), time: data.time, status: { not: 'CANCELLED' } } }); if (conflict) throw { status: 409, message: 'Horário indisponível.' }; return prisma.appointment.create({ data: { userId: data.userId, clientName: data.clientName, barberId: data.barberId, date: new Date(data.date), time: data.time, totalPrice: total, notes: data.notes, services: { create: data.serviceIds.map(id => ({ serviceId: id })) } }, include: { services: { include: { service: true } } } }); }
export async function cancelAppointment(id: number, userId: number) { const appt = await prisma.appointment.findUnique({ where: { id } }); if (!appt || appt.userId !== userId) throw { status: 404, message: 'Agendamento não encontrado.' }; if (appt.status === 'CANCELLED') return appt; return prisma.appointment.update({ where: { id }, data: { status: 'CANCELLED' } }); }